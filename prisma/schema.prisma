// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum PomodoroStatus {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}

model WaitlistEmail {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  ip_address String?  @db.VarChar(45) // For optional IP tracking
  
  @@map("waitlist_emails") // Explicit table name in snake_case
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  passwordHash  String
  theme         String    @default("default")
  profileImage  String?
  sequence      Int       @default(0)
  lastCheckIn   DateTime? 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  notifications Notification[]
  boards        Board[]
  tasks         Task[]
  pomodoros     Pomodoro[]
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Board {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns   Column[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("boards")
}

model Column {
  id        String   @id @default(cuid())
  title     String
  order     Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("columns")
}

model Task {
  id           String   @id @default(cuid())
  title        String
  description  String?
  priority     Priority // "HIGH", "MEDIUM", "LOW"
  startAt      DateTime?
  endAt        DateTime?
  pomodoroGoal Int      @default(1)
  columnId     String
  column       Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pomodoros    Pomodoro[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tasks")
}

model Pomodoro {
  id          String         @id @default(cuid())
  duration    Int            @default(25) // em minutos
  breakTime   Int            @default(5)  // em minutos
  status      PomodoroStatus @default(PENDING) // "PENDING", "RUNNING", "PAUSED", "COMPLETED"
  startedAt   DateTime?
  pausedAt    DateTime?
  completedAt DateTime?
  taskId      String
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("pomodoros")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaitlistEmail {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  ip_address String?  @db.VarChar(45)

  @@map("waitlist_emails")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  passwordHash     String
  theme            String            @default("default")
  profileImage     String?
  sequence         Int               @default(0)
  lastCheckIn      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  LumiMemory       LumiMemory[]
  notifications    Notification[]
  boards           Board[]

  pomodoroSettings PomodoroSettings?
  pomodoros        Pomodoro[]
  tasks            Task[]
}

model PomodoroSettings {
  id             String   @id @default(cuid())
  focusDuration  Int      @default(25)
  shortBreakTime Int      @default(5)
  longBreakTime  Int      @default(15)
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pomodoro_settings")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Board {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns   Column[]

  @@map("boards")
}

model Column {
  id        String   @id @default(cuid())
  title     String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("columns")
}

model Task {
  id            String         @id @default(cuid())
  title         String
  description   String?
  priority      Priority
  startAt       DateTime?
  endAt         DateTime?
  pomodoroGoal  Int            @default(1)
  columnId      String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  completed     Boolean        @default(false)

  pomodoros     Pomodoro[]
  column        Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Pomodoro {
  id          String         @id @default(cuid())
  duration    Int            @default(25)
  breakTime   Int            @default(5)
  status      PomodoroStatus @default(PENDING)
  startedAt   DateTime?
  pausedAt    DateTime?
  completedAt DateTime?
  taskId      String
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pomodoros")
}



model LumiMemory {
  id                  String          @id
  userId              String
  type                MemoryType
  content             String
  importance          ImportanceLevel @default(MEDIUM)
  emotionalContext    String?
  productivityPattern String?
  communicationStyle  String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime
  expiresAt           DateTime?
  tags                String[]        @default([])
  User                User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([importance])
  @@index([type])
  @@index([userId])
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum PomodoroStatus {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}



enum ImportanceLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MemoryType {
  PERSONAL_INFO
  PERSONAL_CONTEXT
  WORK_CONTEXT
  STUDY_CONTEXT
  PRODUCTIVITY_PATTERN
  EMOTIONAL_STATE
  COMMUNICATION_STYLE
  GOALS_PROJECTS
  PREFERENCES
  IMPORTANT_DATES
  FEEDBACK
}
